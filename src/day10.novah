module day10

import util (readProcess)

pub
run : Unit -> Tuple Int String
run () =
  let parse line = (String.split " " line |> List.nth 1) ?? int
  let input = readProcess 10 "\n" parse

  let exec x acc = case _ of
    [] -> acc += x
    [None :: rest] -> exec x (acc += x) rest
    [Some v :: rest] -> exec (x + v) (acc ++ [x, x]) rest

  let draw cycle x =
    if (cycle % 40) in [(x - 1) .. (x + 1)] then "#" else "."

  let strengths = exec 1 [] input
  let sigStrs = strengths |> List.mapIndexed (*)
  let part1 =
    range 20 220 40 |> rangeToList |> List.map sigStrs.[_] |> List.sum

  let img = strengths |> List.mapIndexed draw |> List.partition 40
  let part2 = img |> List.map (String.join "") |> String.join "\n"
  part1 ; part2